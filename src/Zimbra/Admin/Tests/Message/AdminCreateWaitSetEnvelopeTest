<?php declare(strict_types=1);

namespace Zimbra\Admin\Tests\Message;

use Zimbra\Admin\Message\AdminCreateWaitSetBody;
use Zimbra\Admin\Message\AdminCreateWaitSetEnvelope;
use Zimbra\Admin\Message\AdminCreateWaitSetRequest;
use Zimbra\Admin\Message\AdminCreateWaitSetResponse;
use Zimbra\Enum\InterestType;
use Zimbra\Struct\IdAndType;
use Zimbra\Struct\WaitSetAddSpec;
use Zimbra\Struct\Tests\ZimbraStructTestCase;

/**
 * Testcase class for AdminCreateWaitSetEnvelope.
 */
class AdminCreateWaitSetEnvelopeTest extends ZimbraStructTestCase
{
    public function testAdminCreateWaitSetEnvelope()
    {
        $waitSetId = $this->faker->uuid;
        $defaultInterests = $this->faker->word;
        $name = $this->faker->word;
        $id = $this->faker->uuid;
        $token = $this->faker->word;
        $type = $this->faker->word;
        $sequence = mt_rand(1, 99);

        $interests = [
            InterestType::FOLDERS()->getValue(),
            InterestType::MESSAGES()->getValue(),
        ];

        $a = new WaitSetAddSpec($name, $id, $token, implode(',', $interests));
        $error = new IdAndType($id, $type);

        $request = new AdminCreateWaitSetRequest(
            $defaultInterests, TRUE, [$a]
        );
        $response = new AdminCreateWaitSetResponse(
            $waitSetId, $defaultInterests, $sequence, [$error]
        );
        $body = new AdminCreateWaitSetBody($request, $response);

        $envelope = new AdminCreateWaitSetEnvelope(new Header(), $body);
        $this->assertSame($body, $envelope->getBody());

        $envelope = new AdminCreateWaitSetEnvelope();
        $envelope->setBody($body);
        $this->assertSame($body, $envelope->getBody());

        $xml = '<?xml version="1.0"?>' . "\n"
            . '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:zimbraAdmin">'
                . '<soap:Body>'
                    . '<urn:AdminCreateWaitSetRequest defTypes="' . $defaultInterests . '" allAccounts="true">'
                        .'<add>'
                            .'<a name="' . $name . '" id="' . $id . '" token="' . $token . '" types="f,m" />'
                        .'</add>'
                    . '</urn:AdminCreateWaitSetRequest>'
                    . '<urn:AdminCreateWaitSetResponse waitSet="' . $waitSetId . '" defTypes="' . $defaultInterests . '" seq="' . $sequence . '">'
                        . '<error id="' . $id . '" type="' . $type . '" />'
                    . '</urn:AdminCreateWaitSetResponse>'
                . '</soap:Body>'
            . '</soap:Envelope>';
        $this->assertXmlStringEqualsXmlString($xml, $this->serializer->serialize($envelope, 'xml'));
        $this->assertEquals($envelope, $this->serializer->deserialize($xml, AdminCreateWaitSetEnvelope::class, 'xml'));

        $json = json_encode([
            'Body' => [
                'AdminCreateWaitSetRequest' => [
                    'defTypes' => $defaultInterests,
                    'allAccounts' => TRUE,
                    'add' => [
                        'a' => [
                            [
                                'name' => $name,
                                'id' => $id,
                                'token' => $token,
                                'types' => 'f,m',
                            ],
                        ]
                    ],
                    '_jsns' => 'urn:zimbraAdmin',
                ],
                'AdminCreateWaitSetResponse' => [
                    'waitSet' => $waitSetId,
                    'defTypes' => $defaultInterests,
                    'seq' => $sequence,
                    'error' => [
                        [
                            'id' => $id,
                            'type' => $type,
                        ],
                    ],
                    '_jsns' => 'urn:zimbraAdmin',
                ],
            ],
        ]);
        $this->assertSame($json, $this->serializer->serialize($envelope, 'json'));
        $this->assertEquals($envelope, $this->serializer->deserialize($json, AdminCreateWaitSetEnvelope::class, 'json'));
    }
}
